==========================================
Sunday, November 12, 2017
==========================================

I think I'll try keeping a little journal of my adventures making this, that may
help me make a blog entry or two after I get sideauth working (at least minimally).

I'm still trying to clean up the code I extracted into the sideauth project from
funtodone, and rename things, reorganize things, etc. Fortunately, since this is
no longer just a bit of another project, I can take my time with this and use TDD,
and see what kind of best practices I can learn while doing it.

The first thing I'm working on is a POST to create a new account. I want to eventually
add support for OAuth2, but for now I just want to get regular accounts with passwords
implemented, with password reset done via email and account creation verified by 
email. I'll need to add APIs for reset and account verification.

Testing resources:
https://golang.org/pkg/net/http/httptest/
https://elithrar.github.io/article/testing-http-handlers-go/
https://medium.com/@PurdonKyle/unit-testing-golang-http-middleware-c7727ca896ea

I've got some code in session_persist.go that should be helpful in figuring out the
account stuff for mongo interactions.

==========================================
Thursday, November 30, 2017
==========================================
My little "random project picker" says that tonight I should work on sideauth coding.

(Unfortunately, it's already late and I'm unbelievably tired.)

I think I'll work on a test for POST to /accounts next, which will call CreateAccount
in the authapi.go file. Actually, I think I'll rename some things, and call that file "account.go"
and rename some of the stuff inside it.


==========================================
Saturday, December 2, 2017
==========================================

I think the main problem with this is that it's a hodgepodge of stuff that I copied
and pasted from github, along with stuff I made for another project, done in a way
that doesn't really match what anyone needs.

For example, the session stuff might be useful for a website, but it's not really
something that a web site needs. You need a session ID, and to have session associated
with a valid account, but all the memory/state for a session can be easily done by
the website without tying it in to an auth/session service. Or at least, that's what
it seems to me tonight.

Next steps are to pare this down to the essentials.
